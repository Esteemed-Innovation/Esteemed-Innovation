buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

mixin {
    add sourceSets.main, 'esteemedinnovation.refmap.json'
}

version = "${config.major_version}.${config.minor_version}"
group = "eiteam.esteemedinnovation"
archivesBaseName = "EsteemedInnovation-${config.mc_version}"

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER');
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${config.mapping_channel}", version: "${config.mapping_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=esteemedinnovation.mixins.json'
            mods {
                esteemedinnovation {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=esteemedinnovation.mixins.json'
            mods {
                esteemedinnovation {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'esteemedinnovation', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                esteemedinnovation {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
  maven {
    name = "CraftTweaker Maven"
    url = "http://maven.blamejared.com"
  }
  maven {
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "esteemedinnovation",
            "Specification-Vendor": "eiteam",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"eiteam",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "esteemedinnovation.mixins.json"
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    classifier = "deobf"
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'eiteam/esteemedinnovation/api/**/*'
    classifier = "api"
}

artifacts {
    archives javadocJar
    archives deobfJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            // Allows the maven pom file to be modified.
            pom.withXml {
                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->
                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
            artifact deobfJar {
                classifier 'deobf'
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

